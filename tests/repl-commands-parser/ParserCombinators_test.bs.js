// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Test = require("rescript-test/src/Test.bs.js");
var Parser = require("../../src/repl-commands-parser/Parser.bs.js");
var TestUtils = require("./test-utils/TestUtils.bs.js");
var ParserCombinators = require("../../src/repl-commands-parser/ParserCombinators.bs.js");

Test.test("Successfully parses appropriate input for the ':load' command", (function (param) {
        var result = Parser.parseReplCommand(ParserCombinators.loadCommandP, ":load some_filename.res");
        TestUtils.equals(undefined, [
              "",
              {
                TAG: /* LoadModule */1,
                _0: "some_filename.res"
              }
            ], result);
      }));

Test.test("Fails to parse when input for the ':load' command consists of a file with any extension other than .res", (function (param) {
        var result = Parser.parseReplCommand(ParserCombinators.loadCommandP, ":load some_filename.txt");
        TestUtils.equals(undefined, undefined, result);
      }));

Test.test("Successfully parses appropriate input for the ':{' (start multiline mode) command", (function (param) {
        var result = Parser.parseReplCommand(ParserCombinators.startMultiLineCommandP, ":{");
        TestUtils.equals(undefined, [
              "",
              /* StartMultiLineMode */0
            ], result);
      }));

Test.test("Fails to parse when input for the ':{' (start multiline mode) command is anything aside from ':{'", (function (param) {
        var result = Parser.parseReplCommand(ParserCombinators.startMultiLineCommandP, ":{z");
        TestUtils.equals(undefined, undefined, result);
      }));

Test.test("Successfully parses appropriate input for the '}:' (end multiline mode) command", (function (param) {
        var result = Parser.parseReplCommand(ParserCombinators.endMultiLineCommandP, "}:");
        TestUtils.equals(undefined, [
              "",
              /* EndMultiLineMode */1
            ], result);
      }));

Test.test("Fails to parse when input for the '}:' (end multiline mode) command is anything aside from '}:'", (function (param) {
        var result = Parser.parseReplCommand(ParserCombinators.endMultiLineCommandP, "}:a");
        TestUtils.equals(undefined, undefined, result);
      }));

/*  Not a pure module */
