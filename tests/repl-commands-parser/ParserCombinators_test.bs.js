// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Test = require("rescript-test/src/Test.bs.js");
var Parser = require("../../src/repl-commands-parser/Parser.bs.js");
var TestUtils = require("./test-utils/TestUtils.bs.js");
var ParserCombinators = require("../../src/repl-commands-parser/ParserCombinators.bs.js");

Test.test("Successfully parses appropriate input for the ':load' command", (function (param) {
        var result = Parser.runParser(ParserCombinators.loadCommandP, ":load Utils");
        TestUtils.equals(undefined, [
              "",
              {
                TAG: /* LoadModule */1,
                _0: "Utils"
              }
            ], result);
      }));

Test.test("Fails to parse when input for the ':load' command consists of a file with any extension other than .res", (function (param) {
        var result = Parser.runParser(ParserCombinators.loadCommandP, ":load some_filename.txt");
        TestUtils.equals(undefined, undefined, result);
      }));

Test.test("Successfully parses appropriate input for the ':{' (start multiline mode) command", (function (param) {
        var result = Parser.runParser(ParserCombinators.startMultiLineCommandP, ":{");
        TestUtils.equals(undefined, [
              "",
              /* StartMultiLineMode */0
            ], result);
      }));

Test.test("Fails to parse when input for the ':{' (start multiline mode) command is anything aside from ':{'", (function (param) {
        var result = Parser.runParser(ParserCombinators.startMultiLineCommandP, ":{z");
        TestUtils.equals(undefined, undefined, result);
      }));

Test.test("Successfully parses appropriate input for the '}:' (end multiline mode) command", (function (param) {
        var result = Parser.runParser(ParserCombinators.endMultiLineCommandP, "}:");
        TestUtils.equals(undefined, [
              "",
              /* EndMultiLineMode */1
            ], result);
      }));

Test.test("Fails to parse when input for the '}:' (end multiline mode) command is anything aside from '}:'", (function (param) {
        var result = Parser.runParser(ParserCombinators.endMultiLineCommandP, "}:a");
        TestUtils.equals(undefined, undefined, result);
      }));

Test.test("rescriptCodeStartsWithJsLogP Successfully parses when the string starts with Js.log", (function (param) {
        var result = Parser.runParser(ParserCombinators.rescriptCodeStartsWithJsLogP, "Js.log");
        TestUtils.equals(undefined, [
              "",
              "Js.log"
            ], result);
      }));

Test.test("rescriptCodeStartsWithJsLogP Fails to parse when Js.log is preceded by any arbitrary series of characters", (function (param) {
        var result = Parser.runParser(ParserCombinators.rescriptCodeStartsWithJsLogP, "dsads Js.log");
        TestUtils.equals(undefined, undefined, result);
      }));

Test.test("rescriptCodeEndsWithJsLogP Successfully parses when the string ends ONLY with ->Js.log", (function (param) {
        var result = Parser.runParser(ParserCombinators.rescriptCodeEndsWithJsLogP, "->Js.log");
        TestUtils.equals(undefined, [
              "",
              "->Js.log"
            ], result);
      }));

Test.test("rescriptCodeEndsWithJsLogP Fails to parse when ->Js.log is followed by anything other than an empty string", (function (param) {
        var result = Parser.runParser(ParserCombinators.rescriptCodeEndsWithJsLogP, "x->Js.log and more");
        TestUtils.equals(undefined, undefined, result);
      }));

Test.test("rescriptCodeStartsOrEndsWithJsLogP Successfully parses when the string starts with Js.log", (function (param) {
        var result = Parser.runParser(ParserCombinators.rescriptCodeStartsOrEndsWithJsLogP, "Js.log");
        TestUtils.equals(undefined, [
              "",
              "Js.log"
            ], result);
      }));

Test.test("rescriptCodeStartsOrEndsWithJsLogP Successfully parses when the string ends ONLY with ->Js.log", (function (param) {
        var result = Parser.runParser(ParserCombinators.rescriptCodeStartsOrEndsWithJsLogP, "x->Js.log");
        TestUtils.equals(undefined, [
              "",
              "->Js.log"
            ], result);
      }));

Test.test("Parser.ParserAlternative.many Successfully parsesg many a's", (function (param) {
        var result = Parser.runParser(Parser.ParserAlternative.many(ParserCombinators.str("a")), "aaab");
        var expected = [
          "b",
          [
            "a",
            "a",
            "a"
          ]
        ];
        TestUtils.equals(undefined, expected, result);
      }));

Test.test("Parser.ParserAlternative.many Successfully parses many a's", (function (param) {
        var result = Parser.runParser(Parser.ParserAlternative.many(ParserCombinators.str("ab")), "ababzr");
        var expected = [
          "zr",
          [
            "ab",
            "ab"
          ]
        ];
        TestUtils.equals(undefined, expected, result);
      }));

Test.test("openModuleLineP Successfully parses the a module import from a string of rescript code", (function (param) {
        var restCodeStr = "\r\n        let x = 100\r\n        Js.log(x + 100)\r\n    ";
        var codeStr = "open Utils\n" + restCodeStr;
        var result = Parser.runParser(ParserCombinators.openModuleLineP, codeStr);
        var expected = [
          "\n" + restCodeStr,
          "open Utils\n"
        ];
        TestUtils.equals(undefined, expected, result);
      }));

Test.test("openModuleLinesP Successfully parses a section of module imports from a string of rescript code", (function (param) {
        var moduleSectionStr = "open Utils\nopen ParserCombinators";
        var restCodeStr = "\r\n        let x = 100\r\n        Js.log(x + 100)\r\n    ";
        var codeStr = moduleSectionStr + "\n" + restCodeStr;
        var result = Parser.runParser(ParserCombinators.openModuleLinesP, codeStr);
        var expected = [
          "\n" + restCodeStr,
          [
            "open Utils\n",
            "open ParserCombinators\n"
          ]
        ];
        TestUtils.equals(undefined, expected, result);
      }));

Test.test("openModuleSectionP Successfully parses the module import section from the remaining code in a string of rescript code", (function (param) {
        var moduleSectionStr = "// Module Imports\nopen Utils\nopen ParserCombinators";
        var restCodeStr = "\r\n        let x = 100\r\n        Js.log(x + 100)\r\n    ";
        var codeStr = moduleSectionStr + "\n" + restCodeStr;
        var result = Parser.runParser(ParserCombinators.openModuleSectionP, codeStr);
        var expected = [
          "\n" + restCodeStr,
          /* OpenModuleSection */{
            _0: "open Utils\nopen ParserCombinators\n"
          }
        ];
        TestUtils.equals(undefined, expected, result);
      }));

Test.test("openModuleSectionP Successfully parses the module import section from the remaining code in a string of rescript code when there are no open Module definitions beneath the // Module Imports section", (function (param) {
        var codeStr = "// Module Imports\n\n\r\n        // Code\r\n        let x = 100\r\n        Js.log(x + 100)\r\n    ";
        var result = Parser.runParser(ParserCombinators.openModuleSectionP, codeStr);
        TestUtils.equals(undefined, undefined, result);
      }));

/*  Not a pure module */
