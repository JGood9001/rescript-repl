// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Parser = require("../repl-commands-parser/Parser.bs.js");
var Js_array = require("rescript/lib/js/js_array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Child_process = require("child_process");
var Js_null_undefined = require("rescript/lib/js/js_null_undefined.js");
var ParserCombinators = require("../repl-commands-parser/ParserCombinators.bs.js");

function eval_js_code(param) {
  var contents = Fs.readFileSync("./src/RescriptRepl.bs.js", "utf8");
  eval(contents);
}

function build_rescript_code(prev_contents, f) {
  return Child_process.exec("npm run res:build", (function (error, stdout, stderr) {
                if (error == null) {
                  return Curry._1(f, undefined);
                } else {
                  Js_null_undefined.bind(error, (function (error_str) {
                          var msg = error_str.message;
                          if (msg !== undefined) {
                            console.log("ERROR: " + msg);
                            console.log("stdout: " + stdout.toString());
                            Fs.writeFileSync("./src/RescriptRepl.res", prev_contents);
                            return ;
                          }
                          
                        }));
                  return ;
                }
              }));
}

function handleContOrClose(contOrClose, cont, close) {
  return new Promise((function (resolve, _reject) {
                if (contOrClose) {
                  Curry._1(cont, contOrClose._0).then(function (param) {
                        return new Promise((function (res, _rej) {
                                      res(undefined);
                                    }));
                      });
                  return resolve(contOrClose);
                } else {
                  console.log("See you Space Cowboy");
                  Curry._1(close, undefined);
                  return resolve(contOrClose);
                }
              }));
}

async function start_repl(make, prompt, close) {
  var state = Curry._1(make, undefined);
  Fs.writeFileSync("./src/RescriptRepl.res", "");
  var run_loop = async function (s) {
    var contOrClose = await Curry._1(prompt, s);
    return await handleContOrClose(contOrClose, run_loop, close);
  };
  return await run_loop(state);
}

function parseReplCommand(s) {
  var xs = [
    Parser.parseReplCommand(ParserCombinators.loadCommandP, s),
    Parser.parseReplCommand(ParserCombinators.startMultiLineCommandP, s),
    Parser.parseReplCommand(ParserCombinators.endMultiLineCommandP, s)
  ];
  var ys = Js_array.filter(Belt_Option.isSome, xs);
  if (ys.length === 0) {
    return {
            TAG: /* RescriptCode */0,
            _0: s
          };
  }
  var match = Caml_array.get(ys, 0);
  if (match !== undefined) {
    return match[1];
  } else {
    return Js_exn.raiseError("INVARIANT VIOLATION: Impossible state, Nones were filtered out of the array prior to this section of the code");
  }
}

function parseAndHandleCommands(state, s) {
  return new Promise((function (resolve, _reject) {
                var _filename = parseReplCommand(s);
                if (typeof _filename === "number") {
                  if (_filename === /* StartMultiLineMode */0) {
                    console.log("StartMultiLineMode");
                    return resolve(/* Continue */{
                                _0: state
                              });
                  }
                  console.log("EndMultiLineMode");
                  return resolve(/* Continue */{
                              _0: state
                            });
                } else {
                  if (_filename.TAG === /* RescriptCode */0) {
                    console.log("RescriptCode");
                    var prev_contents = Fs.readFileSync("./src/RescriptRepl.res", "utf8");
                    Fs.writeFileSync("./src/RescriptRepl.res", prev_contents + "\n" + _filename._0);
                    build_rescript_code(prev_contents, eval_js_code);
                    return resolve(/* Continue */{
                                _0: state
                              });
                  }
                  console.log("LoadModule");
                  return resolve(/* Continue */{
                              _0: state
                            });
                }
              }));
}

exports.eval_js_code = eval_js_code;
exports.build_rescript_code = build_rescript_code;
exports.handleContOrClose = handleContOrClose;
exports.start_repl = start_repl;
exports.parseReplCommand = parseReplCommand;
exports.parseAndHandleCommands = parseAndHandleCommands;
/* fs Not a pure module */
