// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Parser = require("./repl-commands-parser/Parser.bs.js");
var NewRepl = require("./new-repl-impl/NewRepl.bs.js");
var Process = require("process");
var Js_array = require("rescript/lib/js/js_array.js");
var Readline = require("readline");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var ParserCombinators = require("./repl-commands-parser/ParserCombinators.bs.js");

function make(param) {
  return /* CommandLineIO */{
          _0: Readline.createInterface({
                input: Process.stdin,
                output: Process.stdout
              })
        };
}

function prompt(rl, query, cb) {
  var rl$1 = rl._0;
  return new Promise((function (resolve, _reject) {
                  rl$1.question(query, (function (x) {
                          resolve(x);
                        }));
                })).then(Curry.__1(cb));
}

function on(rl, $$event, cb) {
  return /* CommandLineIO */{
          _0: rl._0.on($$event, cb)
        };
}

function close(rl) {
  rl._0.close();
}

var CommandLineIOAlg = {
  make: make,
  prompt: prompt,
  on: on,
  close: close
};

function parseReplCommand(s) {
  var xs = [
    Parser.parseReplCommand(ParserCombinators.loadCommandP, s),
    Parser.parseReplCommand(ParserCombinators.startMultiLineCommandP, s),
    Parser.parseReplCommand(ParserCombinators.endMultiLineCommandP, s)
  ];
  var ys = Js_array.filter(Belt_Option.isSome, xs);
  if (ys.length === 0) {
    return {
            TAG: /* RescriptCode */0,
            _0: s
          };
  }
  var match = Caml_array.get(ys, 0);
  if (match !== undefined) {
    return match[1];
  } else {
    return Js_exn.raiseError("INVARIANT VIOLATION: Impossible state, Nones were filtered out of the array prior to this section of the code");
  }
}

function handleUserInput(s) {
  return new Promise((function (resolve, _reject) {
                parseReplCommand(s);
                resolve(/* Continue */0);
                resolve(/* Close */1);
              }));
}

function cleanup(param) {
  try {
    Fs.unlinkSync("./src/RescriptRepl.res");
    Fs.unlinkSync("./src/RescriptRepl.bs.js");
    return ;
  }
  catch (exn){
    return ;
  }
}

var DomainLogicAlg = {
  handleUserInput: handleUserInput,
  cleanup: cleanup
};

function run_repl(param) {
  return NewRepl.repl(CommandLineIOAlg, DomainLogicAlg);
}

exports.CommandLineIOAlg = CommandLineIOAlg;
exports.parseReplCommand = parseReplCommand;
exports.DomainLogicAlg = DomainLogicAlg;
exports.run_repl = run_repl;
/* fs Not a pure module */
