// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("rescript/lib/js/curry.js");
var REPLLogic = require("./repl-logic/REPLLogic.bs.js");
var Noderepl = require("node:repl");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

var Repl = {};

var multilineModeState = {
  contents: {
    active: false,
    rescriptCodeInput: undefined
  }
};

function isRecoverableError(error) {
  if (error.name !== "SyntaxError") {
    return false;
  }
  var re = /^(Unexpected end of input|Unexpected token)/g;
  return re.test(error.message);
}

function f(param) {
  console.log("line 1");
  console.log("line 2");
}

var s = {
  contents: ""
};

async function $$eval(codeStr, context, filename, callback) {
  try {
    s.contents = s.contents + "\n" + codeStr;
    console.log("s");
    console.log(s);
    return ;
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    if (isRecoverableError(e)) {
      console.log("it's recoverable?");
      return Curry._2(callback, undefined, "");
    } else {
      return ;
    }
  }
}

function startMultiLineMode(replServer, param) {
  multilineModeState.contents = {
    active: true,
    rescriptCodeInput: ""
  };
  replServer.displayPrompt();
}

async function endMultiLineMode(replServer) {
  var codeStr = multilineModeState.contents.rescriptCodeInput;
  var rescriptStdout = await REPLLogic.handleBuildAndEval(codeStr, {
        read: REPLLogic.FileOperations.read,
        write: REPLLogic.FileOperations.write
      }, REPLLogic.RescriptBuild, REPLLogic.EvalJavaScriptCode);
  multilineModeState.contents = {
    active: false,
    rescriptCodeInput: undefined
  };
  if (rescriptStdout !== undefined) {
    console.log(rescriptStdout);
  } else {
    console.log("");
  }
  replServer.displayPrompt();
}

function loadModule(replServer, moduleName) {
  REPLLogic.handleLoadModuleCase(moduleName, {
        read: REPLLogic.FileOperations.read,
        write: REPLLogic.FileOperations.write
      }, REPLLogic.RescriptBuild, REPLLogic.EvalJavaScriptCode);
  replServer.displayPrompt();
}

function reset(replServer, FO, param) {
  Curry._2(FO.write, /* Filepath */{
        _0: "./src/RescriptREPL.res"
      }, "");
  replServer.displayPrompt();
}

function run_repl(param) {
  var replServer = Noderepl.start({
        prompt: "> ",
        eval: $$eval
      });
  replServer.defineCommand(":{", (function (param) {
          return startMultiLineMode(replServer, param);
        }));
  replServer.defineCommand("}:", (function (param) {
          endMultiLineMode(replServer);
        }));
  replServer.defineCommand("load", (function (param) {
          return loadModule(replServer, param);
        }));
  var partial_arg_read = REPLLogic.FileOperations.read;
  var partial_arg_write = REPLLogic.FileOperations.write;
  var partial_arg = {
    read: partial_arg_read,
    write: partial_arg_write
  };
  replServer.defineCommand("reset", (function (param) {
          return reset(replServer, partial_arg, param);
        }));
  replServer.on("exit", (function (param) {
          console.log("exiting");
          try {
            Fs.unlinkSync("./src/RescriptRepl.res");
            Fs.unlinkSync("./src/RescriptRepl.bs.js");
            Fs.unlinkSync("./src/evalJsCode.js");
            return ;
          }
          catch (exn){
            return ;
          }
        }));
}

exports.Repl = Repl;
exports.multilineModeState = multilineModeState;
exports.isRecoverableError = isRecoverableError;
exports.f = f;
exports.s = s;
exports.$$eval = $$eval;
exports.startMultiLineMode = startMultiLineMode;
exports.endMultiLineMode = endMultiLineMode;
exports.loadModule = loadModule;
exports.reset = reset;
exports.run_repl = run_repl;
/* fs Not a pure module */
